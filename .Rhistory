#messy
hist(compas$RawScore, breaks = "FD", probability = TRUE)
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
#messy
hist(compas$RawScore, breaks = "FD", probability = TRUE)
#first chunk -> scores < 7 (this is an estimate,
#should we try using a chunking algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores1)
#first chunk -> scores < 7 (this is an estimate,
#should we try using a chunking algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
score <- (max - scores$RawScore) / (max - min)
hist(score, breaks = "FD", probability = TRUE)
mu <- mean(score); mu
var <- var(score); var
#used Wolfram Alpha to find parameters for a beta distribution by solving a system of equations
param1 <- 15162/3725
param2 <- 11913/3725
#dbeta looks accurate!
curve(dbeta(x, param1, param2), add = TRUE, col = "red")
#dbeta looks accurate - so low scores are distributed according to a beta distribution
curve(dbeta(x, param1, param2), add = TRUE, col = "red")
scores2 <- compas[which(compas$RawScore >= 7),]
#second chunk of scores -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 3, ncp = 30), add = TRUE, col = "red")
curve(dchisq(x, 1, ncp = 30), add = TRUE, col = "red")
curve(dchisq(x, 20, ncp = 30), add = TRUE, col = "red")
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 0.25, ncp = 30), add = TRUE, col = "red")
curve(dchisq(x, 0.01, ncp = 30), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 30), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4, ncp = 30), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4, ncp = 10), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 15), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4, ncp = 15), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(10:50, 4, ncp = 15), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 15), add = TRUE, col = "red")
curve(dchisq(x, mu, ncp = 15), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, mu, ncp = 15), add = TRUE, col = "red")
hist(scores2$RawScore, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 5), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 10), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 15), add = TRUE, col = "red")
curve(dchisq(x, 4, ncp = 50), add = TRUE, col = "red")
hist(scores2$RawScore - 10, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4), add = TRUE, col = "red")
curve(dchisq(x, mu), add = TRUE, col = "red")
hist(scores2$RawScore - 15, breaks = "FD", probability = TRUE)
curve(dchisq(x, mu), add = TRUE, col = "red")
curve(dchisq(x, 4), add = TRUE, col = "red")
hist(scores2$RawScore - 15, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4), add = TRUE, col = "red")
curve(dchisq(x, 5), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dchisq(x, 5), add = TRUE, col = "red")
curve(dchisq(x, 5.3), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
mu <- mean(score); mu
mu <- mean(score2) ; mu
scores2 <- compas[which(compas$RawScore >= 7),]
score2 <- scores2$RawScore - 12
mu <- mean(score2) ; mu
scores2 <- compas[which(compas$RawScore >= 7),]
score2 <- scores2$RawScore - 12
mu <- mean(score2) ; mu
var <- var(score2); var
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dchisq(x, mu), add = TRUE, col = "red")
curve(dchisq(x, 5.5), add = TRUE, col = "red")
curve(dchisq(x, 5.7), add = TRUE, col = "red")
curve(dchisq(x, 5.9), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dchisq(x, 5.9), add = TRUE, col = "red")
curve(dchisq(x, 4), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dchisq(x, 4), add = TRUE, col = "red")
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dgamma(x, 2), add = TRUE, col = "red")
curve(dgamma(x, 3), add = TRUE, col = "red")
curve(dgamma(x, 4), add = TRUE, col = "red")
curve(dgamma(x, 6), add = TRUE, col = "red")
mu <- mean(score2) ; mu
var <- var(score2); var
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
curve(dgamma(x, mu), add = TRUE, col = "red")
score2 <- (scores2$RawScore - 12) / 4
hist(scores2$RawScore - 12, breaks = "FD", probability = TRUE)
hist(score2, breaks = "FD", probability = TRUE)
mu <- mean(score2) ; mu
var <- var(score2); var
hist(score2, breaks = "FD", probability = TRUE)
curve(dgamma(x, mu), add = TRUE, col = "red")
score2 <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(score2) ; mu
var <- var(score2); var
hist(score2, breaks = "FD", probability = TRUE)
#a gamma distribution appears to fit quite well once we've transformed the data
curve(dgamma(x, mu), add = TRUE, col = "red")
library(ggplot2)
library(ggplot2)
#messy but there are two clear peaks we can isolate
hist(compas$RawScore, breaks = "FD", probability = TRUE)
#first chunk -> scores < 7 (this is an estimate,
#should we try using a chunking algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
ggplot(scores, aes(x=score)) + geom_histogram()
ggplot(compas, aes(x=RawScore)) + geom_histogram()
#first chunk -> scores < 7 (this is an estimate,
#should we try using a chunking algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
ggplot(scores, aes(x=score)) + geom_histogram()
curve(dbeta(x, param1, param2), add = TRUE, col = "red")
plot <- ggplot(scores, aes(x=score)) + geom_histogram(); plot
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
library(ggplot2)
#messy but there are two clear peaks we can isolate
ggplot(compas, aes(x=RawScore)) + geom_histogram()
#first chunk -> scores < 7 (this is an estimate,
#should we try using a chunking algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
plot <- ggplot(scores, aes(x=score)) + geom_histogram(); plot
mu <- mean(score); mu
var <- var(score); var
#used Wolfram Alpha to find parameters for a beta distribution by solving a system of equations
param1 <- 15162/3725
param2 <- 11913/3725
stat <- stat_function(aes(x = x, y = y), fun = dbeta, colour="red", n = 100,
args = list(shape1 = param1, shape2 = param2))
plot + stat
stat <- stat_function(aes(x = x), fun = dbeta, colour="red", n = 100,
args = list(shape1 = param1, shape2 = param2))
plot + stat
ggplot(scores, aes(x=score)) + geom_histogram() + stat_function(aes(x = x), fun = dbeta, colour="red", n = 100,
args = list(shape1 = param1, shape2 = param2))
stat <- stat_function(fun = dbeta, colour="red", n = 100,
args = list(shape1 = param1, shape2 = param2))
plot + stat
stat
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
stat + ggplot()
stat <- plot_beta_dist_gg(alpha = param1, beta = param2)
plot + stat
plot <- ggplot(scores, aes(x=score)) +  geom_density(); plot
plot <- ggplot(scores, aes(x=score)) +  geom_historgram () + geom_density(); plot
plot <- ggplot(scores, aes(x=score)) +  geom_histogram () + geom_density(); plot
plot <- ggplot(scores, aes(x=score, y = ..density..)) +  geom_density(); plot
plot <- ggplot(scores) + geom_histogram(aes(x=score, y = ..density..)); plot
plot <- ggplot(scores) + geom_histogram(aes(x=score, y = ..density..), binwidth = 1); plot
plot <- ggplot(scores) + geom_histogram(aes(x=score, y = ..density..), binwidth = 0.01); plot
plot <- ggplot(scores) + geom_histogram(aes(x=score, y = ..density..), binwidth = 0.25); plot
plot <- ggplot(scores) + geom_histogram(aes(x=score, y = ..density..), binwidth = 0.05); plot
stat <- plot_beta_dist_gg(alpha = param1, beta = param2)
stat <- plot_beta_dist_gg(alpha = param1, beta = param2)
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
stat <- stat_function(fun = dbeta, args = list(param1, param2), lwd = 2, col = "red")
plot + stat
#second chunk of scores -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
#translating the data to the origin
#and transforming it to lie between 0 and 10
scores2$score <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(scores2$score) ; mu
var <- var(scores2$score); var
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density))); plot
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.05); plot
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.5); plot
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.25); plot
#second chunk of scores -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
#translating the data to the origin
#and transforming it to lie between 0 and 10
scores2$score <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(scores2$score) ; mu
var <- var(scores2$score); var
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.25); plot
#let's try dgamma
stat <- stat_function(fun = dgamma, args = list(mu), lwd = 1, col = "red")
plot + stat
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
library(ggplot2)
#messy but there are two clear peaks we can isolate
ggplot(compas, aes(x=RawScore)) + geom_histogram()
#first cluster -> scores < 7 (this is an estimate,
#should we try using a clustering algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
mu <- mean(scores$score); mu
var <- var(scores$score); var
#used Wolfram Alpha to find parameters for a beta distribution by solving a system of equations
param1 <- 15162/3725
param2 <- 11913/3725
#let's try dbeta
stat <- stat_function(fun = dbeta, args = list(param1, param2), lwd = 2, col = "red")
#that looks quite accurate!
plot + stat
stat <- stat_function(fun = dbeta, args = list(param1, param2), lwd = 1, col = "red")
#that looks quite accurate!
plot + stat
#second cluster -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
#translating the data to the origin
#and transforming it to lie between 0 and 10
scores2$score <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(scores2$score) ; mu
var <- var(scores2$score); var
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.25); plot
#let's try dgamma
stat <- stat_function(fun = dgamma, args = list(mu), lwd = 1, col = "red")
#dgamma appears to fit!
plot + stat
#do our transformations make the distributions that we fit useless?
clusters <- kmeans (compas, 2)
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
library(ggplot2)
clusters <- kmeans (compas, 2)
clusters <- kmeans(compas$RawScore, 2)
clusters <- kmeans(compas$RawScore, 2); clusters
compas$clusters <- clusters
compas$clusters <- clusters$vector
clusters <- kmeans(compas$RawScore, 2)$vector; clusters
clusters <- kmeans(compas$RawScore, 2)$ClusteringVector; clusters
clusters <- kmeans(compas$RawScore, 2)$cluster; clusters
compas$clusters <- clusters
scores <- compas[which(compas$clusters = 1)]
scores <- compas[which(compas$clusters == 1),]
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
scores$score <- (max - scores$RawScore) / (max - min)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
scores$score <- (max - scores$RawScore) / (max - min)
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
library(ggplot2)
#messy but there are two clear clusters we can isolate
ggplot(compas, aes(x=RawScore)) + geom_histogram()
#first cluster -> scores < 7 (this is an estimate,
#should we try using a clustering algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
mu <- mean(scores$score); mu
var <- var(scores$score); var
#used Wolfram Alpha to find parameters for a beta distribution by solving a system of equations
param1 <- 15162/3725
param2 <- 11913/3725
#let's try dbeta
stat <- stat_function(fun = dbeta, args = list(param1, param2), lwd = 1, col = "red")
#that looks quite accurate!
plot + stat
#second cluster -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
#translating the data to the origin
#and transforming it to lie between 0 and 10
scores2$score <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(scores2$score) ; mu
var <- var(scores2$score); var
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.25); plot
#let's try dgamma
stat <- stat_function(fun = dgamma, args = list(mu), lwd = 1, col = "red")
#dgamma appears to fit!
plot + stat
#do our transformations make the distributions that we fit useless?
#View(scores)
scores_black <- compas[which(compas$Ethnic_Code_Text == 'African-American'),]
#View(scores_black)
mean(scores_black$RawScore)
compas <- read.csv ("compass/compas-scores-raw.csv"); head(compas)
library(ggplot2)
#messy but there are two clear clusters we can isolate
ggplot(compas, aes(x=RawScore)) + geom_histogram()
#first cluster -> scores < 7 (this is an estimate,
#should we try using a clustering algorithm like k-means or something?)
scores <- compas[which(compas$RawScore < 7),]; head(scores)
max <- max(scores$RawScore)
min <- min(scores$RawScore)
#squeezing the values to be between 0 and 1
scores$score <- (max - scores$RawScore) / (max - min)
plot <- ggplot(scores, aes(score)) + geom_histogram(aes(y = stat(density))); plot
mu <- mean(scores$score); mu
var <- var(scores$score); var
#used Wolfram Alpha to find parameters for a beta distribution by solving a system of equations
param1 <- 15162/3725
param2 <- 11913/3725
#let's try dbeta
stat <- stat_function(fun = dbeta, args = list(param1, param2), lwd = 1, col = "red")
#that looks quite accurate!
plot + stat
#second cluster -> scores > 7
scores2 <- compas[which(compas$RawScore >= 7),]
#translating the data to the origin
#and transforming it to lie between 0 and 10
scores2$score <- (scores2$RawScore - min(scores2$RawScore)) / 4
mu <- mean(scores2$score) ; mu
var <- var(scores2$score); var
plot <- ggplot(scores2, aes(score)) + geom_histogram(aes(y = stat(density)), binwidth = 0.25); plot
#let's try dgamma
stat <- stat_function(fun = dgamma, args = list(mu), lwd = 1, col = "red")
#dgamma appears to fit!
plot + stat
#do our transformations make the distributions that we fit useless?
#View(scores)
scores_black <- compas[which(compas$Ethnic_Code_Text == 'African-American'),]
#View(scores_black)
mean(scores_black$RawScore)
scores_white <- compas[which(compas$Ethnic_Code_Text == 'Caucasian'),]
mean(scores_white$RawScore)
diff <- mean(scores_black$RawScore) - mean(scores_white$RawScore); diff
n0 = length(scores_white$RawScore)
n1 = length(scores_black$RawScore)
all_scores <- c(scores_white$RawScore, scores_black$RawScore)
diffs <- vector()
for (i in 1:5000){
sampled_white <- sample(all_scores, n0, replace = FALSE)
sampled_black <- all_scores[! all_scores %in% sampled_white]
diffs <- c(diffs, mean(sampled_black) - mean(sampled_white))
}
hist(diffs, color = 'red')
abline(v = diff)
hist(diffs, color = 'red')
abline(v = diff)
percentile <- ecdf(diffs)
(1 - percentile(0.5879))*2
hist(scores_white$RawScore)
hist(scores_black$RawScore)
scores_white$id <- 'white'
scores_black$id <- 'black'
#df <- data.frame(white = scores_white$RawScore, black = scores_black$RawScore)
Lengths <- data.frame(rbind(scores_black, scores_white))
ggplot(Lengths, aes(RawScore, fill = id)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
